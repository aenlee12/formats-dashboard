import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤", layout="wide")

def detect_columns(df):
    cols = list(df.columns)
    lower = [c.lower() for c in cols]
    # find by keywords
    def find(keywords):
        for i, c in enumerate(lower):
            for kw in keywords:
                if kw in c:
                    return cols[i]
        return None
    return {
        'category':  find(['–∫–∞—Ç–µ–≥–æ—Ä']),
        'week':      find(['–Ω–µ–¥–µ–ª']),
        'day':       find(['–¥–µ–Ω—å','dayofweek']),
        'share':     find(['–¥–æ–ª—è']),
        'revenue':   find(['–≤—ã—Ä—É—á'])
    }

@st.cache_data
def load_and_prepare(files):
    # load files as DataFrames
    dfs = [pd.read_csv(f) if f.name.lower().endswith('.csv') else pd.read_excel(f, header=0) 
           for f in files]
    # detect columns in each
    info = []
    share_df = rev_df = None
    for df in dfs:
        cols = detect_columns(df)
        info.append(cols)
        if cols['share'] and all(cols[k] for k in ('category','week','day')):
            share_df = df
            share_cols = cols
        if cols['revenue'] and all(cols[k] for k in ('category','week','day')):
            rev_df = df
            rev_cols = cols
    if share_df is None or rev_df is None:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã.\n" +
                         "\n".join(str(i) for i in info))
    # rename columns to standard
    def rename_df(df, cols):
        return df.rename(columns={
            cols['category']: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            cols['week']:     '–ù–µ–¥–µ–ª—è',
            cols['day']:      'DayOfWeek'
        })
    df_s = rename_df(share_df, share_cols)
    df_r = rename_df(rev_df,   rev_cols)
    # convert share to numeric %
    scol = share_cols['share']
    df_s['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] = pd.to_numeric(
        df_s[scol].astype(str).str.replace(',','.'), errors='coerce'
    ).fillna(0)
    # convert revenue
    rcol = rev_cols['revenue']
    df_r['–í—ã—Ä—É—á–∫–∞'] = pd.to_numeric(df_r[rcol], errors='coerce').fillna(0)
    # keep only necessary columns
    df_s = df_s[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶']]
    df_r = df_r[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–í—ã—Ä—É—á–∫–∞']]
    # merge
    dfm = pd.merge(df_s, df_r, on=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek'], how='inner')
    return dfm

def main():
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤: –∞–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

    st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    files = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n‚Ä¢ —Å % —Å–ø–∏—Å–∞–Ω–∏–π\n‚Ä¢ —Å –≤—ã—Ä—É—á–∫–æ–π",
        type=['csv','xlsx'], accept_multiple_files=True
    )
    if len(files)!=2:
        st.sidebar.info("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return

    try:
        df = load_and_prepare(files)
    except Exception as e:
        st.sidebar.error(str(e))
        return

    # compute weekly averages
    df['avg_rev_week'] = df.groupby('–ù–µ–¥–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].transform('mean')
    df['rev_pct'] = df['–í—ã—Ä—É—á–∫–∞']/df['avg_rev_week']*100

    # filters
    st.sidebar.header("2. –§–∏–ª—å—Ç—Ä—ã")
    cats  = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique(), default=None)
    weeks = st.sidebar.multiselect("–ù–µ–¥–µ–ª–∏",    df['–ù–µ–¥–µ–ª—è'].unique(),     default=None)
    if cats:  df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(cats)]
    if weeks:df = df[df['–ù–µ–¥–µ–ª—è'].isin(weeks)]

    # test period inputs
    st.sidebar.header("3. –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥")
    all_weeks = sorted(df['–ù–µ–¥–µ–ª—è'].unique())
    test_week = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è", all_weeks, index=len(all_weeks)-1)
    test_day  = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", sorted(df['DayOfWeek'].unique()))

    # thresholds
    st.sidebar.header("4. –ü–æ—Ä–æ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
    share_thr = st.sidebar.slider("–ü–æ—Ä–æ–≥ % —Å–ø–∏—Å–∞–Ω–∏–π", 0.0,100.0,20.0)
    rev_thr   = st.sidebar.slider("–ú–∏–Ω. % –≤—ã—Ä—É—á–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ",0.0,200.0,80.0)

    # comparison table pre/post
    weekly = df.groupby('–ù–µ–¥–µ–ª—è').apply(lambda g: pd.Series({
        'revenue_sum': g['–í—ã—Ä—É—á–∫–∞'].sum(),
        'waste_avg':   np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], weights=g['–í—ã—Ä—É—á–∫–∞'])
                         if g['–í—ã—Ä—É—á–∫–∞'].sum()>0 else g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].mean(),
        'net_sum':     g['–í—ã—Ä—É—á–∫–∞'].sum()*(1 - np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], 
                           weights=g['–í—ã—Ä—É—á–∫–∞'])/100 if g['–í—ã—Ä—É—á–∫–∞'].sum()>0 else 0)
    })).reset_index()

    pre  = weekly[weekly['–ù–µ–¥–µ–ª—è']<test_week]
    post = weekly[weekly['–ù–µ–¥–µ–ª—è']>=test_week]
    rev_pre, rev_post = pre['revenue_sum'].mean(), post['revenue_sum'].mean()
    waste_pre, waste_post = pre['waste_avg'].mean(), post['waste_avg'].mean()
    net_pre, net_post = pre['net_sum'].mean(), post['net_sum'].mean()

    st.subheader("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞")
    st.markdown(f"""
- –í—ã—Ä—É—á–∫–∞: **{rev_pre:.0f} ‚Üí {rev_post:.0f} ‚ÇΩ** ({(rev_post/rev_pre-1)*100:.1f}%)
- % —Å–ø–∏—Å–∞–Ω–∏–π: **{waste_pre:.1f}% ‚Üí {waste_post:.1f}%** ({(waste_post-waste_pre):+.1f} –ø.–ø.)
- –ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞: **{net_pre:.0f} ‚Üí {net_post:.0f} ‚ÇΩ** ({(net_post/net_pre-1)*100:.1f}%)
""")

    # trends
    st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig1 = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='revenue_sum', markers=True, title="–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig1.add_vline(x=test_week, line_color='red', line_dash='dash')
    fig1.update_layout(height=450)
    st.plotly_chart(fig1, use_container_width=True)

    fig2 = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='waste_avg', markers=True, title="% —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig2.add_vline(x=test_week, line_color='red', line_dash='dash')
    fig2.update_layout(height=450)
    st.plotly_chart(fig2, use_container_width=True)

    # heatmap normalized per category
    st.subheader(f"üó∫ Heatmap –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ (–Ω–µ–¥–µ–ª—è {test_week})")
    df_h = df[df['–ù–µ–¥–µ–ª—è']==test_week]
    heat = df_h.pivot(index='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', columns='DayOfWeek', values='–í—ã—Ä—É—á–∫–∞').fillna(0)
    # row normalization
    norm = heat.sub(heat.min(axis=1), axis=0).div(heat.max(axis=1)-heat.min(axis=1), axis=0).fillna(0.5)
    fig_heat = px.imshow(norm, 
                        labels=dict(x="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color="–ù–æ—Ä–º. –≤—ã—Ä—É—á–∫–∞"),
                        x=norm.columns, y=norm.index,
                        color_continuous_scale=[(0,'red'),(0.5,'white'),(1,'green')])
    fig_heat.update_traces(xgap=1, ygap=1)
    fig_heat.update_layout(height=600)
    st.plotly_chart(fig_heat, use_container_width=True)

    # export
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='raw', index=False)
        weekly.to_excel(writer, sheet_name='weekly', index=False)
        norm.to_excel(writer, sheet_name=f'heat_norm_{test_week}', index=True)
    buf.seek(0)
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel)", buf,
                       "dashboard.xlsx",
                       "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

if __name__ == "__main__":
    main()
