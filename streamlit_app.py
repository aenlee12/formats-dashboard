import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤", layout="wide")

@st.cache_data
def load_df(file):
    """Load CSV or Excel and normalize column names."""
    if file.name.lower().endswith('.csv'):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file, header=0)
    # all to lowercase for matching
    df.columns = df.columns.str.strip().str.lower()
    col_map = {}
    for c in df.columns:
        if '–∫–∞—Ç–µ–≥–æ—Ä' in c:        col_map[c] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        elif '–Ω–µ–¥–µ–ª' in c:        col_map[c] = '–ù–µ–¥–µ–ª—è'
        elif '–¥–µ–Ω—å' in c:         col_map[c] = 'DayOfWeek'
        elif '–¥–æ–ª—è' in c:         col_map[c] = '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'
        elif '–≤—ã—Ä—É—á' in c:        col_map[c] = '–í—ã—Ä—É—á–∫–∞'
    return df.rename(columns=col_map)

@st.cache_data
def prepare_data(files):
    """Merge two files (share & revenue) into one DataFrame."""
    df_share = df_rev = None
    info = []
    for f in files:
        df = load_df(f)
        info.append((f.name, df.columns.tolist()))
        if '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶' in df.columns:
            df_share = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶']].copy()
        if '–í—ã—Ä—É—á–∫–∞' in df.columns:
            df_rev = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–í—ã—Ä—É—á–∫–∞']].copy()
    if df_share is None or df_rev is None:
        msg = "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤:\n" + "\n".join(f"{n}: {cols}" for n,cols in info)
        msg += "\n–¢—Ä–µ–±—É—é—Ç—Å—è ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª –∏ ¬´–í—ã—Ä—É—á–∫–∞¬ª."
        raise ValueError(msg)

    # parse share as numeric
    s = df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].astype(str).str.replace(',', '.').str.rstrip('%')
    df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] = pd.to_numeric(s, errors='coerce').fillna(0)
    # if loaded as fraction (max ‚â§1), convert to percent
    if df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].max() <= 1:
        df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] *= 100

    # parse revenue
    df_rev['–í—ã—Ä—É—á–∫–∞'] = pd.to_numeric(df_rev['–í—ã—Ä—É—á–∫–∞'], errors='coerce').fillna(0)

    return pd.merge(df_share, df_rev, on=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek'], how='inner')

def main():
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤: –∞–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # 1) –∑–∞–≥—Ä—É–∑–∫–∞
    st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    files = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n‚Ä¢ ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª\n‚Ä¢ ¬´–í—ã—Ä—É—á–∫–∞¬ª",
        type=['csv','xlsx'], accept_multiple_files=True
    )
    if len(files) != 2:
        st.sidebar.info("–ù—É–∂–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return
    try:
        df = prepare_data(files)
    except Exception as e:
        st.sidebar.error(e)
        return

    # 2) –æ–±—â–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    df['avg_rev_week'] = df.groupby('–ù–µ–¥–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].transform('mean')
    df['rev_pct']      = df['–í—ã—Ä—É—á–∫–∞'] / df['avg_rev_week'] * 100

    # 3) —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.header("2. –§–∏–ª—å—Ç—Ä—ã")
    cats  = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique(), default=None)
    weeks = st.sidebar.multiselect("–ù–µ–¥–µ–ª–∏",    df['–ù–µ–¥–µ–ª—è'].unique(),     default=None)
    if cats:  df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(cats)]
    if weeks: df = df[df['–ù–µ–¥–µ–ª—è'].isin(weeks)]

    # 4) –ø–æ—Ä–æ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    st.sidebar.header("3. –ü–æ—Ä–æ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
    share_thr = st.sidebar.slider("–ü–æ—Ä–æ–≥ % —Å–ø–∏—Å–∞–Ω–∏–π",      0.0, 100.0, 20.0)
    rev_thr   = st.sidebar.slider("–ú–∏–Ω. % –≤—ã—Ä—É—á–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ", 0.0, 200.0, 80.0)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Default report ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    st.subheader("üìà –û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã (–ø–æ –≤—Å–µ–º –Ω–µ–¥–µ–ª—è–º)")

    weekly = df.groupby('–ù–µ–¥–µ–ª—è').apply(lambda g: pd.Series({
        '–í—ã—Ä—É—á–∫–∞': g['–í—ã—Ä—É—á–∫–∞'].sum(),
        '% —Å–ø–∏—Å–∞–Ω–∏–π': np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], weights=g['–í—ã—Ä—É—á–∫–∞'])
    })).reset_index()

    # revenue trend
    fig_rev = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='–í—ã—Ä—É—á–∫–∞',
                      markers=True, title="–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_rev.update_layout(height=400)
    st.plotly_chart(fig_rev, use_container_width=True)

    # waste trend
    fig_waste = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='% —Å–ø–∏—Å–∞–Ω–∏–π',
                        markers=True, title="% —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_waste.update_layout(height=400)
    st.plotly_chart(fig_waste, use_container_width=True)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Test Analysis ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    st.sidebar.header("4. –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    test_mode = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞")

    if test_mode:
        # selectors
        all_weeks = sorted(df['–ù–µ–¥–µ–ª—è'].unique())
        test_week = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ—Å—Ç–∞", all_weeks, index=len(all_weeks)-1)
        test_day  = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", sorted(df['DayOfWeek'].unique()))

        # prepare weekly series with net revenue
        weekly_full = df.groupby('–ù–µ–¥–µ–ª—è').apply(lambda g: pd.Series({
            'revenue_sum': g['–í—ã—Ä—É—á–∫–∞'].sum(),
            'waste_avg':   np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], weights=g['–í—ã—Ä—É—á–∫–∞']) if g['–í—ã—Ä—É—á–∫–∞'].sum()>0 else 0,
        })).reset_index()
        weekly_full['net_sum'] = weekly_full['revenue_sum'] * (1 - weekly_full['waste_avg']/100)

        pre  = weekly_full[weekly_full['–ù–µ–¥–µ–ª—è'] < test_week]
        post = weekly_full[weekly_full['–ù–µ–¥–µ–ª—è'] >= test_week]

        rev_pre, rev_post       = pre['revenue_sum'].mean(), post['revenue_sum'].mean()
        waste_pre, waste_post   = pre['waste_avg'].mean(),   post['waste_avg'].mean()
        net_pre, net_post       = pre['net_sum'].mean(),     post['net_sum'].mean()

        # metrics
        st.subheader("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
        st.markdown(f"""
- **–í—ã—Ä—É—á–∫–∞**: {rev_pre:.0f} ‚Üí {rev_post:.0f} ‚ÇΩ ({(rev_post/rev_pre-1)*100:.1f}%)
- **% —Å–ø–∏—Å–∞–Ω–∏–π**: {waste_pre:.1f}% ‚Üí {waste_post:.1f}% ({waste_post-waste_pre:+.1f} –ø.–ø.)
- **–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞**: {net_pre:.0f} ‚Üí {net_post:.0f} ‚ÇΩ ({(net_post/net_pre-1)*100:.1f}%)
""")

        # test trends with marker
        fig_rev_t = px.line(weekly_full, x='–ù–µ–¥–µ–ª—è', y='revenue_sum', markers=True, title="–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")
        fig_rev_t.add_vline(x=test_week, line_color='red', line_dash='dash', annotation_text="–°—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞")
        fig_rev_t.update_layout(height=400)
        st.plotly_chart(fig_rev_t, use_container_width=True)

        fig_waste_t = px.line(weekly_full, x='–ù–µ–¥–µ–ª—è', y='waste_avg', markers=True, title="% —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
        fig_waste_t.add_vline(x=test_week, line_color='red', line_dash='dash')
        fig_waste_t.update_layout(height=400)
        st.plotly_chart(fig_waste_t, use_container_width=True)

        # heatmap normalized per category
        st.subheader(f"üó∫ Heatmap –Ω–æ—Ä–º. –≤—ã—Ä—É—á–∫–∏ (–Ω–µ–¥–µ–ª—è {test_week})")
        df_h = df[df['–ù–µ–¥–µ–ª—è'] == test_week]
        heat = df_h.pivot(index='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', columns='DayOfWeek', values='–í—ã—Ä—É—á–∫–∞').fillna(0)
        # normalize row-wise
        norm = heat.sub(heat.min(axis=1), axis=0).div(heat.max(axis=1)-heat.min(axis=1), axis=0).fillna(0.5)
        fig_heat = px.imshow(
            norm,
            labels=dict(x="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color="–ù–æ—Ä–º. –≤—ã—Ä—É—á–∫–∞"),
            x=norm.columns, y=norm.index,
            color_continuous_scale=[(0, 'red'), (0.5, 'white'), (1, 'green')]
        )
        fig_heat.update_traces(xgap=1, ygap=1)
        fig_heat.update_layout(height=600)
        st.plotly_chart(fig_heat, use_container_width=True)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Export ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='raw', index=False)
        weekly.to_excel(writer, sheet_name='trend_all', index=False)
        if test_mode:
            weekly_full.to_excel(writer, sheet_name='trend_test', index=False)
            norm.to_excel(writer, sheet_name=f'heat_norm_{test_week}', index=True)
    buf.seek(0)
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", buf,
                       "dashboard.xlsx",
                       "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


if __name__ == "__main__":
    main()
