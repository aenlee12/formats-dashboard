import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤", layout="wide")

@st.cache_data
def load_df(file):
    if file.name.lower().endswith('.csv'):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file, header=0)
    df.columns = df.columns.str.strip().str.lower()
    col_map = {}
    for c in df.columns:
        if '–∫–∞—Ç–µ–≥–æ—Ä' in c:        col_map[c] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        elif '–Ω–µ–¥–µ–ª' in c:        col_map[c] = '–ù–µ–¥–µ–ª—è'
        elif '–¥–µ–Ω—å' in c:         col_map[c] = 'DayOfWeek'
        elif '–¥–æ–ª—è' in c:         col_map[c] = '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'
        elif '–≤—ã—Ä—É—á' in c:        col_map[c] = '–í—ã—Ä—É—á–∫–∞'
    return df.rename(columns=col_map)

@st.cache_data
def prepare_data(files):
    df_share = df_rev = None
    for f in files:
        df = load_df(f)
        if '–¥–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –∑—Ü' in df.columns:
            df_share = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶']].copy()
        elif '–≤—ã—Ä—É—á–∫–∞' in df.columns:
            df_rev = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–í—ã—Ä—É—á–∫–∞']].copy()
    if df_share is None or df_rev is None:
        raise ValueError("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–≤–∞ —Ñ–∞–π–ª–∞: –æ–¥–∏–Ω —Å ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª, –≤—Ç–æ—Ä–æ–π —Å ¬´–í—ã—Ä—É—á–∫–∞¬ª")
    s = df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].astype(str).str.replace(',', '.').str.rstrip('%')
    df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] = pd.to_numeric(s, errors='coerce').fillna(0)
    df_rev['–í—ã—Ä—É—á–∫–∞'] = pd.to_numeric(df_rev['–í—ã—Ä—É—á–∫–∞'], errors='coerce').fillna(0)
    return pd.merge(df_share, df_rev, on=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek'], how='inner')

def main():
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤: –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑")
    files = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞: % —Å–ø–∏—Å–∞–Ω–∏–π –∏ –í—ã—Ä—É—á–∫–∞", type=['csv','xlsx'], accept_multiple_files=True)
    if len(files) != 2:
        st.sidebar.info("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return
    try:
        df = prepare_data(files)
    except Exception as e:
        st.sidebar.error(e)
        return

    df['avg_rev_week'] = df.groupby('–ù–µ–¥–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].transform('mean')
    df['rev_pct'] = df['–í—ã—Ä—É—á–∫–∞'] / df['avg_rev_week'] * 100

    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    cats = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", sorted(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()), default=None)
    weeks = st.sidebar.multiselect("–ù–µ–¥–µ–ª–∏", sorted(df['–ù–µ–¥–µ–ª—è'].unique()), default=None)
    if cats: df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(cats)]
    if weeks: df = df[df['–ù–µ–¥–µ–ª—è'].isin(weeks)]

    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞")
    test_week = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ—Å—Ç–∞", sorted(df['–ù–µ–¥–µ–ª—è'].unique()), index=len(df['–ù–µ–¥–µ–ª—è'].unique())-1)
    test_day = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç–µ—Å—Ç–∞", sorted(df['DayOfWeek'].unique()), index=0)

    st.sidebar.header("–ü–æ—Ä–æ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
    share_thr = st.sidebar.slider("–ü–æ—Ä–æ–≥ % —Å–ø–∏—Å–∞–Ω–∏–π", 0.0, 100.0, 20.0)
    rev_thr = st.sidebar.slider("–ú–∏–Ω. % –≤—ã—Ä—É—á–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ", 0.0, 200.0, 80.0)

    # Metrics comparison pre-test vs test
    weekly = df.groupby('–ù–µ–¥–µ–ª—è').apply(lambda g: pd.Series({
        'revenue': g['–í—ã—Ä—É—á–∫–∞'].sum(),
        'waste_avg': np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], weights=g['–í—ã—Ä—É—á–∫–∞']) if g['–í—ã—Ä—É—á–∫–∞'].sum()>0 else g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].mean()
    })).reset_index()
    pre = weekly[weekly['–ù–µ–¥–µ–ª—è']<test_week]
    post = weekly[weekly['–ù–µ–¥–µ–ª—è']>=test_week]
    rev_pre = pre['revenue'].mean() if not pre.empty else 0
    rev_post = post['revenue'].mean() if not post.empty else 0
    waste_pre = pre['waste_avg'].mean() if not pre.empty else 0
    waste_post = post['waste_avg'].mean() if not post.empty else 0
    net_pre = rev_pre*(1-waste_pre/100)
    net_post = rev_post*(1-waste_post/100)

    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    st.markdown(f"""
- **–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞**: {rev_pre:.0f} ‚Üí {rev_post:.0f} ‚ÇΩ ({(rev_post/rev_pre-1)*100:.1f}%)
- **–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π**: {waste_pre:.1f}% ‚Üí {waste_post:.1f}% ({waste_pre-waste_post:.1f} –ø.–ø.)
- **–°—Ä–µ–¥–Ω—è—è —á–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞**: {net_pre:.0f} ‚Üí {net_post:.0f} ‚ÇΩ ({(net_post/net_pre-1)*100:.1f}%)
""")

    # Line charts with test start marker
    st.subheader("üöÄ –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_rev = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='revenue', markers=True, title="–í—ã—Ä—É—á–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_rev.add_vline(x=test_week, line_color='red', line_dash='dash', annotation_text="–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è")
    fig_rev.update_layout(height=400)
    st.plotly_chart(fig_rev, use_container_width=True)

    fig_waste = px.line(weekly, x='–ù–µ–¥–µ–ª—è', y='waste_avg', markers=True, title="% —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_waste.add_vline(x=test_week, line_color='red', line_dash='dash')
    fig_waste.update_layout(height=400)
    st.plotly_chart(fig_waste, use_container_width=True)

    # Heatmap for selected week
    st.subheader(f"üó∫ Heatmap –≤—ã—Ä—É—á–∫–∏: –Ω–µ–¥–µ–ª—è {test_week}")
    df_h = df[df['–ù–µ–¥–µ–ª—è']==test_week]
    heat = df_h.pivot_table(index='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', columns='DayOfWeek', values='–í—ã—Ä—É—á–∫–∞', aggfunc='sum')
    fig_heat = px.imshow(heat, labels=dict(x="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color="–í—ã—Ä—É—á–∫–∞"), aspect="auto", color_continuous_scale="Viridis")
    fig_heat.update_traces(xgap=1, ygap=1)
    fig_heat.update_layout(height=500)
    st.plotly_chart(fig_heat, use_container_width=True)

    # Export
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='raw', index=False)
        weekly.to_excel(writer, sheet_name='weekly', index=False)
        heat.to_excel(writer, sheet_name=f'heat_{test_week}', index=True)
    buf.seek(0)
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel)", buf, "dashboard.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

if __name__ == "__main__":
    main()
