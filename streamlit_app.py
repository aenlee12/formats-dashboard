import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤", layout="wide")

@st.cache_data
def load_df(file):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV/Excel –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ."""
    if file.name.lower().endswith('.csv'):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file, header=0)

    # –°—Ä–∞–∑—É –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    df.columns = df.columns.str.strip().str.lower()

    col_map = {}
    for col in df.columns:
        if '–∫–∞—Ç–µ–≥–æ—Ä' in col:
            col_map[col] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        elif '–Ω–µ–¥–µ–ª' in col:
            col_map[col] = '–ù–µ–¥–µ–ª—è'
        elif '–¥–µ–Ω—å' in col or 'dayofweek' in col:
            col_map[col] = 'DayOfWeek'
        elif '–¥–æ–ª—è' in col:
            col_map[col] = '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'
        elif '–≤—ã—Ä—É—á' in col:
            col_map[col] = '–í—ã—Ä—É—á–∫–∞'

    return df.rename(columns=col_map)

@st.cache_data
def prepare_data(files):
    """–ò–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –≤—ã—Ä—É—á–∫–∞) —Å–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω DataFrame."""
    df_share = df_rev = None

    for f in files:
        df = load_df(f)
        # –ò—â–µ–º —É–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        if '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶' in df.columns:
            df_share = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶']].copy()
        elif '–í—ã—Ä—É—á–∫–∞' in df.columns:
            df_rev = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–í—ã—Ä—É—á–∫–∞']].copy()

    if df_share is None or df_rev is None:
        raise ValueError(
            "–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ –æ–¥–∏–Ω —Å –∫–æ–ª–æ–Ω–∫–æ–π ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª\n"
            "‚Ä¢ –≤—Ç–æ—Ä–æ–π —Å –∫–æ–ª–æ–Ω–∫–æ–π ¬´–í—ã—Ä—É—á–∫–∞¬ª"
        )

    # –ü—Ä–∏–≤–æ–¥–∏–º % –∫ —á–∏—Å–ª—É
    s = df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].astype(str).str.replace(',', '.').str.rstrip('%')
    df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] = pd.to_numeric(s, errors='coerce').fillna(0)

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—ã—Ä—É—á–∫—É –∫ —á–∏—Å–ª—É
    df_rev['–í—ã—Ä—É—á–∫–∞'] = pd.to_numeric(df_rev['–í—ã—Ä—É—á–∫–∞'], errors='coerce').fillna(0)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º
    return pd.merge(
        df_share, df_rev,
        on=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek'],
        how='inner'
    )

def main():
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤: –ñ—É–∫ –∏ –¢–µ—Å—Ç")

    st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
    files = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n"
        "‚Ä¢ ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª\n"
        "‚Ä¢ ¬´–í—ã—Ä—É—á–∫–∞¬ª",
        type=['csv','xlsx'], accept_multiple_files=True
    )
    if len(files) != 2:
        st.sidebar.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return

    try:
        df = prepare_data(files)
    except Exception as e:
        st.sidebar.error(str(e))
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤—ã—Ä—É—á–∫—É
    df['avg_rev_week'] = df.groupby('–ù–µ–¥–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].transform('mean')
    df['rev_pct']      = df['–í—ã—Ä—É—á–∫–∞'] / df['avg_rev_week'] * 100

    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.header("2. –§–∏–ª—å—Ç—Ä—ã")
    cats  = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", sorted(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()), default=None)
    weeks = st.sidebar.multiselect("–ù–µ–¥–µ–ª–∏",    sorted(df['–ù–µ–¥–µ–ª—è'].unique()),     default=None)
    if cats:
        df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(cats)]
    if weeks:
        df = df[df['–ù–µ–¥–µ–ª—è'].isin(weeks)]

    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    st.sidebar.header("3. –ü–æ—Ä–æ–≥–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏")
    share_thr = st.sidebar.slider("–ü–æ—Ä–æ–≥ % —Å–ø–∏—Å–∞–Ω–∏–π", 0.0, 100.0, 20.0)
    rev_thr   = st.sidebar.slider("–ú–∏–Ω. % –≤—ã—Ä—É—á–∫–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ", 0.0, 200.0, 80.0)

    # –í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è Heatmap
    st.sidebar.header("4. Heatmap –Ω–µ–¥–µ–ª—è")
    last_week = int(df['–ù–µ–¥–µ–ª—è'].max())
    sel_week  = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è Heatmap",
        options=sorted(df['–ù–µ–¥–µ–ª—è'].unique()),
        index=sorted(df['–ù–µ–¥–µ–ª—è'].unique()).index(last_week)
    )

    # ----------------------------------------------------------------
    # 1) –¢–∞–±–ª–∏—Ü–∞ –ø–æ [–ù–µ–¥–µ–ª—è √ó –î–µ–Ω—åOfWeek]
    st.subheader("üìÖ –¢–∞–±–ª–∏—Ü–∞: –ù–µ–¥–µ–ª—è √ó –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    pivot = df.pivot_table(
        index=['–ù–µ–¥–µ–ª—è','DayOfWeek'],
        columns='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        values=['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶','rev_pct'],
        aggfunc='mean'
    )
    # —Ä–∞—Å–ø—Ä—è–º–ª—è–µ–º MultiIndex
    flat = [f"{metric}_{cat}" for metric,cat in pivot.columns]
    pivot.columns = flat

    waste_cols   = [c for c in flat if c.startswith('–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶_')]
    rev_pct_cols = [c for c in flat if c.startswith('rev_pct_')]

    styled = pivot.style.format("{:.1f}") \
        .applymap(lambda v: 'background-color: tomato' if v>=share_thr else '', subset=waste_cols) \
        .applymap(lambda v: 'background-color: tomato' if v<=rev_thr   else '', subset=rev_pct_cols)

    st.dataframe(styled, use_container_width=True)

    # ----------------------------------------------------------------
    # 2) –õ–∏–Ω–µ–π–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
    st.subheader("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º")
    wk = df.groupby(['–ù–µ–¥–µ–ª—è','–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).agg({
        '–í—ã—Ä—É—á–∫–∞': 'sum',
        '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶': lambda s: np.average(s, weights=df.loc[s.index,'–í—ã—Ä—É—á–∫–∞'])
                                       if df.loc[s.index,'–í—ã—Ä—É—á–∫–∞'].sum()>0 else s.mean()
    }).reset_index()

    fig_rev = px.line(wk, x='–ù–µ–¥–µ–ª—è', y='–í—ã—Ä—É—á–∫–∞', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                      markers=True, title="–°—É–º–º–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_rev.update_layout(height=500)
    st.plotly_chart(fig_rev, use_container_width=True)

    fig_waste = px.line(wk, x='–ù–µ–¥–µ–ª—è', y='–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        markers=True, title="–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π % —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º")
    fig_waste.update_layout(height=500)
    st.plotly_chart(fig_waste, use_container_width=True)

    # ----------------------------------------------------------------
    # 3) Heatmap –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
    st.subheader(f"üó∫ Heatmap –≤—ã—Ä—É—á–∫–∏: –ù–µ–¥–µ–ª—è {sel_week}")
    df_h = df[df['–ù–µ–¥–µ–ª—è']==sel_week]
    heat = df_h.pivot_table(
        index='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        columns='DayOfWeek',
        values='–í—ã—Ä—É—á–∫–∞',
        aggfunc='sum'
    )

    fig_heat = px.imshow(
        heat,
        labels=dict(x="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color="–í—ã—Ä—É—á–∫–∞"),
        aspect="auto",
        color_continuous_scale="Viridis"
    )
    fig_heat.update_traces(xgap=1, ygap=1)
    fig_heat.update_layout(height=700)
    st.plotly_chart(fig_heat, use_container_width=True)

    # ----------------------------------------------------------------
    # –≠–∫—Å–ø–æ—Ä—Ç
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='raw_data', index=False)
        wk.to_excel(writer, sheet_name='trend_by_week', index=False)
        heat.to_excel(writer, sheet_name=f'heatmap_week_{sel_week}', index=True)
    buf.seek(0)
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel)", buf,
                       "formats_dashboard.xlsx",
                       "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

if __name__ == "__main__":
    main()
