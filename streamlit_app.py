import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO

# Page config
st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤", layout="wide")

@st.cache_data
def load_df(file):
    if file.name.lower().endswith('.csv'):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file, header=0)
    df.columns = df.columns.str.strip().str.lower()
    col_map = {}
    for c in df.columns:
        if '–∫–∞—Ç–µ–≥–æ—Ä' in c:        col_map[c] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        elif '–Ω–µ–¥–µ–ª' in c:        col_map[c] = '–ù–µ–¥–µ–ª—è'
        elif '–¥–µ–Ω—å' in c or 'dayofweek' in c: col_map[c] = 'DayOfWeek'
        elif '–¥–æ–ª—è' in c:         col_map[c] = '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'
        elif '–≤—ã—Ä—É—á' in c:        col_map[c] = '–í—ã—Ä—É—á–∫–∞'
    return df.rename(columns=col_map)

@st.cache_data
def prepare_data(files):
    df_share = df_rev = None
    info = []
    for f in files:
        df = load_df(f)
        info.append((f.name, df.columns.tolist()))
        if '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶' in df.columns:
            df_share = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶']].copy()
        if '–í—ã—Ä—É—á–∫–∞' in df.columns:
            df_rev   = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek','–í—ã—Ä—É—á–∫–∞']].copy()
    if df_share is None or df_rev is None:
        details = "\n".join(f"{n}: {cols}" for n,cols in info)
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª –∏ ¬´–í—ã—Ä—É—á–∫–∞¬ª.\n{details}")
    s = df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].astype(str).str.replace(',', '.').str.rstrip('%')
    df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] = pd.to_numeric(s, errors='coerce').fillna(0)
    if df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'].max() <= 1:
        df_share['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'] *= 100
    df_rev['–í—ã—Ä—É—á–∫–∞'] = pd.to_numeric(df_rev['–í—ã—Ä—É—á–∫–∞'], errors='coerce').fillna(0)
    return pd.merge(df_share, df_rev, on=['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ù–µ–¥–µ–ª—è','DayOfWeek'], how='inner')

def main():
    st.title("üìä –î–∞—à–±–æ—Ä–¥ —Ñ–æ—Ä–º–∞—Ç–æ–≤: –∞–Ω–∞–ª–∏–∑ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

    st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    files = st.sidebar.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n‚Ä¢ ¬´–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶¬ª\n‚Ä¢ ¬´–í—ã—Ä—É—á–∫–∞¬ª",
        type=['csv','xlsx'], accept_multiple_files=True)
    if len(files) != 2:
        st.sidebar.info("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return
    try:
        df = prepare_data(files)
    except Exception as e:
        st.sidebar.error(e)
        return

    df['avg_rev_week'] = df.groupby('–ù–µ–¥–µ–ª—è')['–í—ã—Ä—É—á–∫–∞'].transform('mean')
    df['rev_pct']      = df['–í—ã—Ä—É—á–∫–∞'] / df['avg_rev_week'] * 100

    st.sidebar.header("2. –§–∏–ª—å—Ç—Ä—ã")
    cats = st.sidebar.multiselect("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", sorted(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()))
    weeks = st.sidebar.multiselect("–ù–µ–¥–µ–ª–∏", sorted(df['–ù–µ–¥–µ–ª—è'].unique()))
    if cats: df = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(cats)]
    if weeks: df = df[df['–ù–µ–¥–µ–ª—è'].isin(weeks)]

    st.sidebar.header("3. Heatmap –Ω–µ–¥–µ–ª—è")
    all_weeks = sorted(df['–ù–µ–¥–µ–ª—è'].unique())
    sel_week = st.sidebar.selectbox("–ù–µ–¥–µ–ª—è –¥–ª—è Heatmap", all_weeks, index=len(all_weeks)-1)

    # –û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    st.subheader("üìà –û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    weekly_cat = df.groupby(['–ù–µ–¥–µ–ª—è','–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).agg(
        {'–í—ã—Ä—É—á–∫–∞':'sum',
         '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶': lambda s: np.average(s, weights=df.loc[s.index,'–í—ã—Ä—É—á–∫–∞'])}
    ).reset_index().rename(columns={'–í—ã—Ä—É—á–∫–∞':'–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶':'–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π'})

    fig_rev = px.line(
        weekly_cat, x='–ù–µ–¥–µ–ª—è', y='–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        markers=True, title="–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    ).update_layout(height=400)
    st.plotly_chart(fig_rev, use_container_width=True)

    fig_waste = px.line(
        weekly_cat, x='–ù–µ–¥–µ–ª—è', y='–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π', color='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        markers=True, title="–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    ).update_layout(height=400)
    st.plotly_chart(fig_waste, use_container_width=True)

    # Heatmap –≤—Å–µ–≥–¥–∞
    st.subheader(f"üó∫ Heatmap –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–Ω–µ–¥–µ–ª—è {sel_week})")
    df_h = df[df['–ù–µ–¥–µ–ª—è']==sel_week]
    heat = df_h.pivot_table(index='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', columns='DayOfWeek', values='–í—ã—Ä—É—á–∫–∞', aggfunc='sum').fillna(0)
    # normalize per category row
    norm = heat.sub(heat.min(axis=1), axis=0).div(heat.max(axis=1)-heat.min(axis=1), axis=0).fillna(0.5)
    fig_heat = px.imshow(
        norm,
        labels=dict(x="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", y="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color="–ù–æ—Ä–º. –≤—ã—Ä—É—á–∫–∞"),
        x=norm.columns, y=norm.index,
        color_continuous_scale=[(0,'red'),(0.5,'white'),(1,'green')]
    )
    fig_heat.update_traces(xgap=1, ygap=1)
    fig_heat.update_layout(height=600)
    st.plotly_chart(fig_heat, use_container_width=True)

    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    st.sidebar.header("4. –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    test_mode = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞")
    if test_mode:
        complete = df.groupby('–ù–µ–¥–µ–ª—è')['DayOfWeek'].nunique()==df['DayOfWeek'].nunique()
        weekly_full = df[df['–ù–µ–¥–µ–ª—è'].isin(complete[complete].index)].groupby('–ù–µ–¥–µ–ª—è').apply(
            lambda g: pd.Series({
                '–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏': g['–í—ã—Ä—É—á–∫–∞'].sum(),
                '–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π': np.average(g['–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶'], weights=g['–í—ã—Ä—É—á–∫–∞'])
            })
        ).reset_index()
        weekly_full['–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞'] = weekly_full['–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏'] * (1 - weekly_full['–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π']/100)

        all_full = sorted(weekly_full['–ù–µ–¥–µ–ª—è'])
        test_week = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è —Ç–µ—Å—Ç–∞", all_full, index=len(all_full)-1)
        # day selector
        days = sorted(df['DayOfWeek'].unique())
        day_map = {d: ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"][d-1] if 1<=d<=7 else str(d) for d in days}
        test_day = st.sidebar.selectbox("–ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å —Ç–µ—Å—Ç–∞", days, format_func=lambda d: day_map[d])

        pre = weekly_full[weekly_full['–ù–µ–¥–µ–ª—è']<test_week]
        post = weekly_full[weekly_full['–ù–µ–¥–µ–ª—è']>=test_week]
        # Combined metric comparison (omitted here if only graphs)
        # Graphs by category pre/post
        cat_comp = df.copy()
        cat_comp['–ü–µ—Ä–∏–æ–¥'] = np.where(cat_comp['–ù–µ–¥–µ–ª—è']<test_week, '–î–æ —Ç–µ—Å—Ç–∞','–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞')
        comp = cat_comp.groupby(['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ü–µ—Ä–∏–æ–¥']).agg({
            '–í—ã—Ä—É—á–∫–∞':'sum',
            '–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶': lambda s: np.average(s, weights=cat_comp.loc[s.index,'–í—ã—Ä—É—á–∫–∞'])
        }).reset_index().rename(columns={'–í—ã—Ä—É—á–∫–∞':'–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏','–î–æ–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –∏ –ó–¶':'–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π'})

        st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        fig_cat_rev = px.bar(
            comp, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', y='–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏', color='–ü–µ—Ä–∏–æ–¥',
            barmode='group', title="–í—ã—Ä—É—á–∫–∞ –¥–æ/–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        ).update_layout(height=400)
        st.plotly_chart(fig_cat_rev, use_container_width=True)

        fig_cat_waste = px.bar(
            comp, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', y='–°—Ä–µ–¥–Ω–∏–π % —Å–ø–∏—Å–∞–Ω–∏–π', color='–ü–µ—Ä–∏–æ–¥',
            barmode='group', title="% —Å–ø–∏—Å–∞–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        ).update_layout(height=400)
        st.plotly_chart(fig_cat_waste, use_container_width=True)

    # –≠–∫—Å–ø–æ—Ä—Ç
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='raw', index=False)
        weekly_cat.to_excel(writer, sheet_name='trend_by_cat', index=False)
        heat.to_excel(writer, sheet_name=f'heat_{sel_week}', index=True)
        if test_mode:
            weekly_full.to_excel(writer, sheet_name='trend_test', index=False)
            comp.to_excel(writer, sheet_name='cat_comp', index=False)
    buf.seek(0)
    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel)", buf,
                       "dashboard.xlsx",
                       "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

if __name__ == "__main__":
    main()
